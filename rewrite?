local commands = {}
local alias = {}

local function mAddCMD(cmd , data)
    table.insert(commands, data)
end

local function addcmd(cmd, _alias, callback)
    commands[cmd] = callback
    alias[_alias] = cmd
end

local function GetPlayer(Name)
	for _,v in ipairs(game.Players:GetPlayers()) do

		if string.lower(v.Name):match("^" .. string.lower(Name)) then
			return v
		end

	end
	return nil
end

local function findcommand(cmd_name)
    for i,v in pairs (commands) do
        if tostring(i) == tostring(cmd_name) then
            print("true "..i)
            return true

        else
            for index, value in pairs (alias) do
                --if value = i
            end
        end
    end
    return false
end

local function FindPlayer(PLAYERNAME)
    if PLAYERNAME == "me" then
        return game.Players.LocalPlayer.Name

    elseif PLAYERNAME == "others" then
        return 0

    elseif PLAYERNAME == "all" then
        return 1
    end
end

local function run_command(cmd)
    local command
    local arguments
    local _index = 0
    for result in string.gmatch(cmd, "%g+") do
        if _index == 0 and commands[result] then
            command = result

        elseif _index == 0 and not commands[result] then
            for i,v in pairs (alias) do
                if i == result then command = v; break end
            end

        elseif _index == 1 then
            arguments = result

        elseif _index >= 2 then
            arguments = arguments .. " " ..result
        end
        _index = _index + 1
    end

    if commands[command] then
        commands[command](arguments)
    end
end

local function detect_argument_type(argument)
    if typeof(argument) == "string" then
        return 0

    elseif typeof(argument) == "number" then
        return 1

    elseif typeof(argument) == nil then
        return -1
    end
end

local function _print(argument_string)
    if detect_argument_type(argument_string) == -1 then print("argument is nil") end
    print(argument_string)
end

addcmd("print", "p", print)
